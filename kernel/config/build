#!/bin/bash
# ==========================================================================
# Este arquivo pertence ao Projeto do Sistema Operacional LuckyOS (LOS).
# --------------------------------------------------------------------------
# Copyright (C) 2013 - Luciano L. Goncalez
# --------------------------------------------------------------------------
# a.k.a.: Master Lucky
# eMail : master.lucky.br@gmail.com
# Home  : http://lucky-labs.blogspot.com.br
# ==========================================================================
# Este programa e software livre; voce pode redistribui-lo e/ou modifica-lo
# sob os termos da Licenca Publica Geral GNU, conforme publicada pela Free
# Software Foundation; na versao 2 da Licenca.
#
# Este programa e distribuido na expectativa de ser util, mas SEM QUALQUER
# GARANTIA; sem mesmo a garantia implicita de COMERCIALIZACAO ou de
# ADEQUACAO A QUALQUER PROPOSITO EM PARTICULAR. Consulte a Licenca Publica
# Geral GNU para obter mais detalhes.
#
# Voce deve ter recebido uma copia da Licenca Publica Geral GNU junto com
# este programa; se nao, escreva para a Free Software Foundation, Inc., 59
# Temple Place, Suite 330, Boston, MA 02111-1307, USA. Ou acesse o site do
# GNU e obtenha sua licenca: http://www.gnu.org/
# ==========================================================================
# build
# --------------------------------------------------------------------------
#   Arquivo de shell scritp que tem por funcao compilar e criar a imagem do
# kernel em uma unica operacao.
# --------------------------------------------------------------------------
# Versao: 0.0
# Data: 28/04/2013
# --------------------------------------------------------------------------
# Executar: Executado em um terminal
# > ./build
# ==========================================================================

# Variaveis usadas como filtros
finalfiles="*.bin *.map"
objfiles="*.o"

# Lista de arquivos usado pelo ld
inputfiles=""

# Variavel que contem o status de erro
error="false"

# Efetua limpeza no diretorio

echo -e "\n# Limpando diretorio...\n"

while read file
do
  echo "  Apagando arquivo '$file'"
  rm "$file"
done < <(ls -1 $finalfiles $objfiles 2> /dev/null)

echo -e "\n# Criando kernel!"

# Assemblando todos os arquivos em assembly
echo -e "\n+ Compilando arquivos em Assembly...\n"

while read file
do
  if ! $error ; then
    echo -n "  Assemblando $file... "

    messageErro=$(nasm -f elf32 $file 2>&1)

    if [ $? -eq 0 ] ; then
      echo "OK"
    else
      error="true"
      echo -e "FALHA"
    fi
  fi
done < <(ls -1 *.asm )

# Arquivos em Pascal vao aqui

# Linkando o kernel para binario, cria o mapfile
if ! $error ; then
  echo -en "\n+ Linkando arquivos... "

  messageErro=$(ld -T ld.cfg -Map kernel.map $inputfiles 2>&1)

  if [ $? -eq 0 ] ; then
    echo "OK"
  else
    error="true"
    echo -e "FALHA"
  fi
fi

# Efetua limpeza no diretorio
if ! $error ; then
  echo -e "\n+ Limpando diretorio...\n"

  while read file
  do
    echo "  Apagando arquivo '$file'"
    rm "$file"
  done < <(ls -1 $objfiles 2> /dev/null)
fi

if $error ; then
  echo -e "\n#>>> $messageErro\n"
else
  echo -e "\n# Kernel criado com sucesso!\n"
fi
